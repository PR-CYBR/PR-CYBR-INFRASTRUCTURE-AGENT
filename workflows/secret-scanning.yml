schema: ./schemas/workflow-interface.schema.yml
name: Secret Scanning Governance
version: '1.0'
description: >-
  Performs organization-wide secret scanning with staged verification and reporting
  so that platform and security agents can act on actionable findings.
owners:
  - security-operations
inputs:
  repository:
    type: string
    description: Git repository identifier, e.g. org/service.
    required: true
  ref:
    type: string
    description: Commit SHA or branch to analyze.
    default: main
  scan_depth:
    type: integer
    description: Number of commits or days to include when scanning history.
    default: 30
outputs:
  secrets_report:
    type: artifact
    description: Aggregated JSON report containing confirmed secret findings.
    format: application/json
    schema: schemas/secrets-report.schema.json
  summary_status:
    type: string
    description: Lifecycle aware status string (`clean`, `issues_found`, `error`).
jobs:
  target_discovery:
    name: Target discovery and scope planning
    lifecycle: setup
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.compile-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository metadata
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          fetch-depth: 0
      - name: Compile commit matrix
        id: compile-matrix
        run: |
          python scripts/workflows/prepare_secret_scope.py \
            --repo "${{ inputs.repository }}" \
            --depth "${{ inputs.scan_depth }}" \
            --output matrix.json
          echo "matrix=$(cat matrix.json)" >> "$GITHUB_OUTPUT"
  run_scanner:
    name: Secret scanning execution
    lifecycle: analysis
    needs: target_discovery
    runs-on: ubuntu-latest
    outputs:
      findings_path: ${{ steps.detect-secrets.outputs.report_path }}
    steps:
      - name: Use target matrix
        run: echo "Received matrix ${{ needs.target_discovery.outputs.matrix }}"
      - name: Install dependencies
        run: pip install detect-secrets==1.4.0 trufflehog==3.65.0
      - name: Execute scanners
        id: detect-secrets
        run: |
          python scripts/workflows/run_secret_scans.py \
            --matrix '${{ needs.target_discovery.outputs.matrix }}' \
            --output artifacts/secrets-report.json
          echo "report_path=artifacts/secrets-report.json" >> "$GITHUB_OUTPUT"
  validate_findings:
    name: Triage and validation
    lifecycle: remediation
    needs: run_scanner
    runs-on: ubuntu-latest
    outputs:
      validated_path: ${{ steps.validate.outputs.path }}
    steps:
      - name: Validate findings against allowlists
        id: validate
        run: |
          python scripts/workflows/validate_secrets.py \
            --input "${{ needs.run_scanner.outputs.findings_path }}" \
            --output artifacts/secrets-report.validated.json
          echo "path=artifacts/secrets-report.validated.json" >> "$GITHUB_OUTPUT"
  publish_results:
    name: Publish results and notifications
    lifecycle: reporting
    needs:
      - validate_findings
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.status.outputs.value }}
    steps:
      - name: Upload validated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: secret-findings
          path: artifacts/secrets-report.validated.json
      - name: Install JSON tooling
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Emit status summary
        id: status
        run: |
          python scripts/workflows/generate_secret_summary.py \
            --input artifacts/secrets-report.validated.json \
            --output artifacts/secrets-report.summary.json
          value=$(jq -r '.status' artifacts/secrets-report.summary.json 2>/dev/null || echo "issues_found")
          echo "value=$value" >> "$GITHUB_OUTPUT"
