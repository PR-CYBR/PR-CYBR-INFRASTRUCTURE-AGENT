schema: ./schemas/workflow-interface.schema.yml
name: Dependency and Infrastructure Vulnerability Scanning
version: '1.0'
description: >-
  Executes software composition analysis, infrastructure as code scanning, and
  correlation to produce prioritized vulnerability findings for remediation agents.
owners:
  - cyber-resilience
inputs:
  repository:
    type: string
    description: Primary repository under analysis.
    required: true
  ref:
    type: string
    description: Git reference to evaluate.
    default: main
  sast_profile:
    type: string
    description: SAST profile to load (standard, strict, experimental).
    default: standard
  dependency_manifest_path:
    type: string
    description: Relative path to dependency manifest directory.
    default: .
outputs:
  vulnerability_manifest:
    type: artifact
    description: Consolidated vulnerability report across scanners.
    format: application/json
    schema: schemas/vulnerability-manifest.schema.json
  remediation_advisory:
    type: artifact
    description: Markdown remediation plan for downstream review.
    format: text/markdown
    schema: schemas/remediation-advisory.schema.md
jobs:
  environment_setup:
    name: Prepare tooling and gather manifests
    lifecycle: setup
    runs-on: ubuntu-latest
    outputs:
      sast_config: ${{ steps.profile.outputs.path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: ${{ inputs.ref }}
          fetch-depth: 0
      - name: Resolve scanning profile
        id: profile
        run: |
          python scripts/workflows/load_profile.py \
            --type sast \
            --name "${{ inputs.sast_profile }}" \
            --output artifacts/sast-profile.json
          echo "path=artifacts/sast-profile.json" >> "$GITHUB_OUTPUT"
  dependency_scan:
    name: Software composition analysis
    lifecycle: analysis
    needs: environment_setup
    runs-on: ubuntu-latest
    outputs:
      dependency_report: ${{ steps.scan.outputs.report }}
    steps:
      - name: Install scanning tools
        run: pip install cyclonedx-bom==3.12.0 safety==3.2.0
      - name: Run dependency scanners
        id: scan
        run: |
          python scripts/workflows/run_sca.py \
            --manifest "${{ inputs.dependency_manifest_path }}" \
            --profile "${{ needs.environment_setup.outputs.sast_config }}" \
            --output artifacts/dependency-report.json
          echo "report=artifacts/dependency-report.json" >> "$GITHUB_OUTPUT"
  infrastructure_scan:
    name: Infrastructure as Code security
    lifecycle: analysis
    needs: environment_setup
    runs-on: ubuntu-latest
    outputs:
      iac_report: ${{ steps.scan.outputs.report }}
    steps:
      - name: Install IaC scanner
        run: pip install checkov==3.2.16 terrascan==1.18.3
      - name: Run IaC scanners
        id: scan
        run: |
          python scripts/workflows/run_iac_scans.py \
            --profile "${{ needs.environment_setup.outputs.sast_config }}" \
            --output artifacts/iac-report.json
          echo "report=artifacts/iac-report.json" >> "$GITHUB_OUTPUT"
  correlate_findings:
    name: Correlate results and enrich with threat intelligence
    lifecycle: reporting
    needs:
      - dependency_scan
      - infrastructure_scan
    runs-on: ubuntu-latest
    outputs:
      manifest: ${{ steps.correlate.outputs.manifest }}
    steps:
      - name: Combine reports
        id: correlate
        run: |
          python scripts/workflows/correlate_vulnerabilities.py \
            --dependency "${{ needs.dependency_scan.outputs.dependency_report }}" \
            --iac "${{ needs.infrastructure_scan.outputs.iac_report }}" \
            --output artifacts/vulnerability-manifest.json
          echo "manifest=artifacts/vulnerability-manifest.json" >> "$GITHUB_OUTPUT"
      - name: Upload manifest
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-manifest
          path: artifacts/vulnerability-manifest.json
  remediation_guidance:
    name: Draft remediation guidance and notify stakeholders
    lifecycle: remediation
    needs: correlate_findings
    runs-on: ubuntu-latest
    outputs:
      advisory: ${{ steps.advisory.outputs.path }}
    steps:
      - name: Generate advisory
        id: advisory
        run: |
          python scripts/workflows/generate_remediation_plan.py \
            --manifest "${{ needs.correlate_findings.outputs.manifest }}" \
            --output artifacts/remediation-advisory.md
          echo "path=artifacts/remediation-advisory.md" >> "$GITHUB_OUTPUT"
      - name: Upload advisory document
        uses: actions/upload-artifact@v4
        with:
          name: remediation-advisory
          path: artifacts/remediation-advisory.md
